#include <Wire.h>
#include <SPI.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define SSR 11
#define MAX6675_SO 2   //purple
#define MAX6675_CS 3   //green
#define MAX6675_SCK 4  //white

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels

// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
#define OLED_RESET -1 // Reset pin # (or -1 if sharing Arduino reset pin)
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

static const unsigned char PROGMEM logo_bmp[] =
{
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x7f, 0xff, 0xfc, 0x3f, 0xff, 0xf0, 0x07, 0xff, 0xff, 0xc0, 0x00, 0x7f, 0xe0, 0x00, 0x00, 
  0x00, 0x3f, 0xff, 0xff, 0x1f, 0xff, 0xfc, 0x03, 0xff, 0xff, 0xc0, 0x01, 0xff, 0xfc, 0x00, 0x00, 
  0x00, 0x1f, 0xff, 0xff, 0x9f, 0xff, 0xfe, 0x01, 0xff, 0xff, 0xc0, 0x07, 0xff, 0xfe, 0x00, 0x00, 
  0x00, 0x0f, 0xff, 0xff, 0xcf, 0xff, 0xff, 0x00, 0xff, 0xff, 0xc0, 0x0f, 0xff, 0xff, 0x80, 0x00, 
  0x00, 0x07, 0xff, 0xff, 0xc7, 0xff, 0xff, 0x80, 0x7f, 0xff, 0xc0, 0x1f, 0xff, 0xff, 0xc0, 0x00, 
  0x00, 0x00, 0x00, 0x0f, 0xe0, 0x00, 0x3f, 0xc0, 0x00, 0x00, 0x00, 0x3f, 0xe0, 0x3f, 0xe0, 0x00, 
  0x00, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x0f, 0xc0, 0x00, 0x00, 0x00, 0x7f, 0x80, 0x0f, 0xf0, 0x00, 
  0x00, 0x00, 0x00, 0x03, 0xe0, 0x00, 0x0f, 0xc0, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x07, 0xf0, 0x00, 
  0x00, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x03, 0xf8, 0x00, 
  0x00, 0x00, 0x00, 0x03, 0xe0, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x01, 0xf8, 0x00, 0x01, 0xf8, 0x00, 
  0x00, 0x00, 0x00, 0x03, 0xe0, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x01, 0xf8, 0x00, 0x00, 0xfc, 0x00, 
  0x00, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x01, 0xf0, 0x00, 0x00, 0xfc, 0x00, 
  0x00, 0x00, 0x00, 0x1f, 0xe0, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x7c, 0x00, 
  0x00, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x0f, 0xcf, 0xff, 0xff, 0xc3, 0xf0, 0x00, 0x00, 0x7c, 0x00, 
  0x00, 0xff, 0xff, 0xff, 0x80, 0x00, 0x1f, 0xcf, 0xff, 0xff, 0xc3, 0xf0, 0x00, 0x00, 0x7e, 0x00, 
  0x00, 0xff, 0xff, 0xff, 0x80, 0x0f, 0xff, 0x8f, 0xff, 0xff, 0xc3, 0xf0, 0x00, 0x00, 0x7e, 0x00, 
  0x00, 0xff, 0xff, 0xff, 0xc0, 0x0f, 0xff, 0x0f, 0xff, 0xff, 0xc3, 0xf0, 0x00, 0x00, 0x7e, 0x00, 
  0x00, 0x7f, 0xff, 0xff, 0xc0, 0x0f, 0xff, 0x0f, 0xff, 0xff, 0xc3, 0xf0, 0x00, 0x00, 0x7c, 0x00, 
  0x00, 0x00, 0x00, 0x0f, 0xe0, 0x07, 0xfc, 0x00, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x7c, 0x00, 
  0x00, 0x00, 0x00, 0x07, 0xe0, 0x03, 0xf8, 0x00, 0x00, 0x00, 0x01, 0xf0, 0x00, 0x00, 0xfc, 0x00, 
  0x00, 0x00, 0x00, 0x03, 0xe0, 0x03, 0xf8, 0x00, 0x00, 0x00, 0x01, 0xf8, 0x00, 0x00, 0xfc, 0x00, 
  0x00, 0x00, 0x00, 0x03, 0xf0, 0x01, 0xf8, 0x00, 0x00, 0x00, 0x01, 0xfc, 0x00, 0x01, 0xf8, 0x00, 
  0x00, 0x00, 0x00, 0x03, 0xe0, 0x01, 0xfc, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x03, 0xf8, 0x00, 
  0x00, 0x00, 0x00, 0x03, 0xe0, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x07, 0xf0, 0x00, 
  0x00, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x80, 0x1f, 0xe0, 0x00, 
  0x00, 0x00, 0x00, 0x1f, 0xe0, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xf0, 0x7f, 0xe0, 0x00, 
  0x00, 0x03, 0xff, 0xff, 0xc0, 0x00, 0x3f, 0x00, 0x7f, 0xff, 0xc0, 0x1f, 0xff, 0xff, 0xc0, 0x00, 
  0x00, 0x03, 0xff, 0xff, 0x80, 0x00, 0x3f, 0x80, 0xff, 0xff, 0xc0, 0x0f, 0xff, 0xff, 0x00, 0x00, 
  0x00, 0x03, 0xff, 0xff, 0x00, 0x00, 0x1f, 0x83, 0xff, 0xff, 0xc0, 0x03, 0xff, 0xfe, 0x00, 0x00, 
  0x00, 0x03, 0xff, 0xfe, 0x00, 0x00, 0x0f, 0xc7, 0xff, 0xff, 0xc0, 0x01, 0xff, 0xf8, 0x00, 0x00, 
  0x00, 0x03, 0xff, 0xf8, 0x00, 0x00, 0x0f, 0xcf, 0xff, 0xff, 0xc0, 0x00, 0x3f, 0xc0, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x77, 0x4b, 0x77, 0xff, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0xec, 0x44, 0xa4, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0xfc, 0x67, 0x27, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0xde, 0x44, 0x21, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x4b, 0xf0, 0x07, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  };


float targetTemperature = 50.00; 
boolean heatingPreviousState = false;
boolean heatingCurrentState = false;

void showText(String text, int textSize, int x, int y) {
  display.setTextSize(textSize); // Draw 2X-scale text
  display.setTextColor(WHITE);
  display.setCursor(x, y);
  display.println(text);
}

void showSplashScreen(void) {
  display.clearDisplay();
  display.drawBitmap(0, 2, logo_bmp, 128, 64, 1);
  display.display();
}

void setup()
{
  pinMode(SSR, OUTPUT);
  Serial.begin(9600);
    // SSD1306_SWITCHCAPVCC = generate display voltage from 3.3V internally
  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) { 
    Serial.println(F("SSD1306 allocation failed"));
    for(;;); // Don't proceed, loop forever
  }
  TCCR2B = TCCR2B & B11111000 | B00000111;    // D11 PWM is now 30.64 Hz
  showSplashScreen();
  delay(2000);
}

void showTemperature(float target, float current) {

  showText("Control",2, 22, 0); 
  display.drawRect(0, 16, 120, 20, WHITE);
  showText("Target: " + String(target) + " C",1, 4, 22);
  display.drawRect(0, 43, 120, 20, WHITE); 
  showText("Current: " + String(current) + " C",1, 4, 50);
  
}

void showHeatingStatus(bool heating) {
  Serial.println("Heating: " + String(heating));
  heatingCurrentState = heating;

  if (!(heatingPreviousState == heatingCurrentState) && (heating == true)){
        heatingCurrentState = true;
        display.fillCircle(10, 6, 3, WHITE);
  } 
}

void loop()
{
    float currentTemperature = read_termocouple();
    display.clearDisplay();
    Serial.println("\n------------------------------------------");
    Serial.println("Current temperature: " + String(currentTemperature, 2));
    showTemperature(targetTemperature, currentTemperature);
    if (currentTemperature <= targetTemperature) {
      Serial.println("Heating up to " + String(targetTemperature) + " C");
      showHeatingStatus(true);
      //Write PWM signal to the SSR
      analogWrite(SSR, 10); //TODO use PID to calculate this (0-255 value).
      //digitalWrite(SSR, HIGH); 
      
    }
    else if (currentTemperature >= targetTemperature){
      Serial.println("Reached " + String(targetTemperature) + " C");
      showHeatingStatus(false);
      digitalWrite(SSR, LOW); 
    }
    Serial.println("------------------------------------------");
    display.display();
    delay(300);
}

double read_termocouple()
{

    uint16_t v;
    pinMode(MAX6675_CS, OUTPUT);
    pinMode(MAX6675_SO, INPUT);
    pinMode(MAX6675_SCK, OUTPUT);

    digitalWrite(MAX6675_CS, LOW);
    delay(1);

    // Read in 16 bits,
    //  15    = 0 always
    //  14..2 = 0.25 degree counts MSB First
    //  2     = 1 if thermocouple is open circuit
    //  1..0  = uninteresting status

    v = shiftIn(MAX6675_SO, MAX6675_SCK, MSBFIRST);
    v <<= 8;
    v |= shiftIn(MAX6675_SO, MAX6675_SCK, MSBFIRST);

    digitalWrite(MAX6675_CS, HIGH);
    if (v & 0x4)
    {
        // Bit 2 indicates if the thermocouple is disconnected
        return NAN;
    }

    // The lower three bits (0,1,2) are discarded status bits
    v >>= 3;

    // The remaining bits are the number of 0.25 degree (C) counts
    return v * 0.25;
}
